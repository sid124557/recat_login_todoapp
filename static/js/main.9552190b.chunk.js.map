{"version":3,"sources":["Components/Home.js","Components/Data.js","Components/Login.js","App.js","index.js"],"names":["Home","useState","savedTodos","localStorage","getItem","JSON","parse","todos","setTodos","todo","setTodo","isEditing","setIsEditing","currentTodo","setCurrentTodo","useEffect","setItem","stringify","className","onSubmit","e","preventDefault","id","updatedTodo","updatedItem","map","handleUpdateTodo","htmlFor","name","type","placeholder","value","text","onChange","target","console","log","onClick","length","trim","handleEditClick","removeItem","filter","handleDeleteClick","Data","username","pwd","auth_token","Login","emaillog","setEmaillog","passwordlog","setPasswordlog","flag","setFlag","home","setHome","pass","item","mail","includes","Cookies","set","path","document","cookie","event","Alert","color","variant","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9552190b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./Home.css\";\n\nexport default function Home() {\n  const [todos, setTodos] = useState(() => {\n    const savedTodos = localStorage.getItem(\"todos\");\n    if (savedTodos) {\n      return JSON.parse(savedTodos);\n    } else {\n      return [];\n    }\n  });\n  const [todo, setTodo] = useState(\"\");\n  // boolean state to know if we are editing (this will let us display\n  // different inputs based on a condition (conditional rendering)\n  const [isEditing, setIsEditing] = useState(false);\n  // object state to set so we know which todo item we are editing\n  const [currentTodo, setCurrentTodo] = useState({});\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  function handleInputChange(e) {\n    setTodo(e.target.value);\n  }\n\n  // function to get the value of the edit input and set the new state\n  function handleEditInputChange(e) {\n    // set the new state value to what's currently in the edit input box\n    setCurrentTodo({ ...currentTodo, text: e.target.value });\n    console.log(currentTodo);\n  }\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (todo !== \"\") {\n      setTodos([\n        ...todos,\n        {\n          id: todos.length + 1,\n          text: todo.trim()\n        }\n      ]);\n    }\n\n    setTodo(\"\");\n  }\n\n  function handleEditFormSubmit(e) {\n    e.preventDefault();\n\n    handleUpdateTodo(currentTodo.id, currentTodo);\n  }\n\n  function handleDeleteClick(id) {\n    const removeItem = todos.filter((todo) => {\n      return todo.id !== id;\n    });\n    setTodos(removeItem);\n  }\n\n  // function to edit a todo item\n  function handleUpdateTodo(id, updatedTodo) {\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\n    // if the id's match, use the second parameter to pass in the updated todo object\n    // otherwise just use old todo\n    const updatedItem = todos.map((todo) => {\n      return todo.id === id ? updatedTodo : todo;\n    });\n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\n    setIsEditing(false);\n    // update the todos state with the updated todo\n    setTodos(updatedItem);\n  }\n\n  // function to handle when the \"Edit\" button is clicked\n  function handleEditClick(todo) {\n    // set editing to true\n    setIsEditing(true);\n    // set the currentTodo to the todo item that was clicked\n    setCurrentTodo({ ...todo });\n  }\n\n  return (\n    <div className=\"App\">\n      {/* We need to conditionally render different inputs based on if we are in editing mode */}\n      {isEditing ? (\n        // if we are editing - display the edit todo input\n        // make sure to add the handleEditFormSubmit function in the \"onSubmit\" prop\n        <form onSubmit={handleEditFormSubmit}>\n          {/* we've added an h2 element */}\n          <h2>Edit Todo</h2>\n          {/* also added a label for the input */}\n          <label htmlFor=\"editTodo\">Edit todo: </label>\n          {/* notice that the value for the update input is set to the currentTodo state */}\n          {/* also notice the handleEditInputChange is being used */}\n          <input\n            name=\"editTodo\"\n            type=\"text\"\n            placeholder=\"Edit todo\"\n            value={currentTodo.text}\n            onChange={handleEditInputChange}\n          />\n          {/* here we added an \"update\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleEditFormSubmit function */}\n          <button type=\"submit\">Update</button>\n          {/* here we added a \"Cancel\" button to set isEditing state back to false which will cancel editing mode */}\n          <button onClick={() => setIsEditing(false)}>Cancel</button>\n        </form>\n      ) : (\n        // if we are not editing - display the add todo input\n        // make sure to add the handleFormSubmit function in the \"onSubmit\" prop\n        <form onSubmit={handleFormSubmit}>\n          {/* we've added an h2 element */}\n          <h2>Add Todo</h2>\n          {/* also added a label for the input */}\n          <label htmlFor=\"todo\">Add todo: </label>\n          {/* notice that the value is still set to the todo state */}\n          {/* also notice the handleInputChange is still the same */}\n          <input\n            name=\"todo\"\n            type=\"text\"\n            placeholder=\"Create a new todo\"\n            value={todo}\n            onChange={handleInputChange}\n          />\n          {/* here we just added a \"Add\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleFormSubmit function */}\n          <button type=\"submit\">Add</button>\n        </form>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            {todo.text}\n            {/* we are passing the entire todo object to the handleEditClick function*/}\n            <button onClick={() => handleEditClick(todo)}>Edit</button>\n            <button onClick={() => handleDeleteClick(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}","const Data = [\r\n    {\r\n      id: 1,\r\n      username:\"sid@test.com\",\r\n      pwd: \"sidtest\",\r\n      auth_token: \"cksbdjcnmcmnzxbcmnzbxm\"\r\n    },\r\n    {\r\n        id: 2,\r\n        username:\"ksjdshjsd@nsdj.com\",\r\n        pwd: \"sidtest\",\r\n        auth_token: \"jdvnmnvbmzxnbcmnzbxmc\"\r\n    }\r\n]\r\nexport default Data;","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Home from \"./Home\";\nimport Data from './Data';\nimport Cookies from \"react-cookie\";\n\nfunction Login() {\n  const [emaillog, setEmaillog] = useState(\" \");\n  const [passwordlog, setPasswordlog] = useState(\" \");\n  const [flag, setFlag] = useState(false);\n  const [home, setHome] = useState(true);\n\n  function handleLogin(e) {\n    e.preventDefault();\n    \n    const pass= Data.map((item) => { return  item.pwd });\n    \n    const mail= Data.map((item) => { return  item.username });\n    \n    console.log(mail)\n    console.log(pass)\n\n\n    if (!emaillog || !passwordlog) {\n      setFlag(true);\n      console.log(\"EMPTY\");\n    } else if (!pass.includes(passwordlog) || !mail.includes(emaillog)) {\n      setFlag(true);\n      const cookies = new Cookies();\n      cookies.set(passwordlog, emaillog, { path: '/' });\n      console.log(document.cookie);\n      localStorage.setItem(\"password\", JSON.stringify(passwordlog));\n      localStorage.setItem(\"Email\", JSON.stringify(emaillog));\n    } else {\n      setHome(!home);\n      setFlag(false);\n    }\n  }\n  return (\n    <div>\n      {home ? (\n        <form onSubmit={handleLogin}>\n          <h3>LogIn</h3>\n          <div className=\"form-group\">\n            <label>Email</label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              placeholder=\"Enter email\"\n              onChange={(event) => setEmaillog(event.target.value)}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Password</label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              placeholder=\"Enter password\"\n              onChange={(event) => setPasswordlog(event.target.value)}\n            />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">\n            Login\n          </button>\n\n          {flag && (\n            <Alert color=\"primary\" variant=\"warning\">\n              Fill correct Info else keep trying.\n            </Alert>\n          )}\n        </form>\n      ) : (\n        <Home />\n      )}\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Login from './Components/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"outer\">\n        <div className=\"inner\">\n          <Login />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}